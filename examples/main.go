package main

import (
	"fmt"

	"github.com/aliamerj/dub-go/pkg/dub"
	"github.com/aliamerj/dub-go/pkg/links"
)

// The main function demonstrates how to use the Dub.co Go SDK to create and retrieve links.
func main() {
	// Initialize the Dub client configuration with your API token and workspace ID.
	client := dub.NewConfig("QKZ2...", "ws_clv...")

	// Create a new link using the Links service.
	// Provide the URL to shorten and the domain under which it should be registered.
	createOpts, errCreated := client.Links.Create(links.RequestOptions{
		URL:    "https://www.google.com",
		Domain: "dub.sh",
	})

	// Check if there was an error during the link creation process.
	if errCreated != nil {
		fmt.Printf("Failed to create link: %+v\n", errCreated)
		return // Stop further execution if there's an error
	}

	// If no error, print the short link generated by the service.
	fmt.Printf("Link created successfully: %s\n", createOpts.ShortLink)

	// Retrieve a link using its domain and key.
	getOpts, errGet := client.Links.Get(links.GetOptions{
		Domain: "dub.sh",
		Key:    "RLTVEzV",
	})

	// Check if there was an error during the link retrieval process.
	if errGet != nil {
		fmt.Printf("Failed to fetch links: %+v\n", errGet)
		return // Stop further execution if there's an error
	}

	// If no error, print the URL fetched by the service.
	fmt.Printf("Links fetched successfully: %s\n", getOpts.URL)

	// Update link's info by link Id
	res, err := client.Links.Update("linkId", links.RequestOptions{})
	if err != nil {
		fmt.Printf("Failed to update links: %+v\n", err)
		return // Stop further execution if there's an error
	}
	fmt.Printf("Links updated successfully: %+v\n", res)
}
